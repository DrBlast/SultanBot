---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by DrBlast.
--- DateTime: 08.01.2020 23:46
---
localPath = scriptPath()
screen = getRealScreenSize()

xb = 0
yb = 0

function findImage(image, reg)
    -- toast("here" .. rnd(1, 1000))
    if RegScreen_On == true then
        image = RegScreen:exists(image:similar(CustomSumilar), CustomTimeToIdentify)
    else
        image = reg:exists(image:similar(CustomSumilar), CustomTimeToIdentify)
    end
    if Highlight == true then
        image:highlight(1)
    end
    if image then
        image_Center = image:getCenter()
    end
    --  toast("done find")
    return image, image_Center
end

function findImageLowSimilar(image, reg)
    -- toast("here" .. rnd(1, 1000))
    if RegScreen_On == true then
        image = RegScreen:exists(image:similar(0.8), CustomTimeToIdentify)
    else
        image = reg:exists(image:similar(0.8), CustomTimeToIdentify)
    end
    if image then
        image_Center = image:getCenter()
    end
    --  toast("done find")
    return image, image_Center
end

function customExists(image, reg)
    local image = reg:exists(image:similar(CustomSumilar), CustomTimeToIdentify)
    if image then
        return true
    else
        return false
    end
end

function findImageFullSimilarity(image, reg)
    if RegScreen_On == true then
        image = RegScreen:exists(image:similar(0.99), CustomTimeToIdentify)
    else
        image = reg:exists(image:similar(0.99), CustomTimeToIdentify)
    end
    if image then
        -- if Highlight == true then
        --    image:highlight(0.5)
        --   end
        --F_Debug("Найден image ", image:getCenter())
        image_Center = image:getCenter()

    end
    return image, image_Center
end

function clickBack()
    click(Location(screenX * 0.05, screenY * 0.07))
    wait(0.5)
end

function backTo(image)
    while (not (findImage(image, RegScreen))) do
        clickBack()
        wait(0.1)
    end
end

function getNotCollectedReg(image, reg)
    if (findImage(image, reg)) then
        im1, c = findImage(image, reg)
        xx1 = im1:getX()
        yy1 = im1:getY()
        r1 = Region(xx1, yy1 - 200, 200, 200)
        if (findImage(notCollected, r1)) then
            click(c)
            return true
        else
            return false
        end
    end
    return false
end

function clickScreenCenter()
    click(Location(screenX / 2, screenY / 2))
end

function existsClick(image, reg, timeAfter)
    --- img = reg:exists(image:similar(CustomSumilar), CustomTimeToIdentify)
    found = reg:existsClick(image:similar(CustomSumilar), CustomTimeToIdentify)

    wait(timeAfter)
    return found
end

function waitExistAndClick(image, reg, timeAfter)
    while not (existsClick(image, reg, timeAfter)) do
        wait(0.1)
    end
end

function waitOneOfExistAndClick(image1, image2, reg, timeAfter)
    while (not (existsClick(image1, reg, timeAfter)) and not (existsClick(image2, reg, timeAfter))) do
        wait(0.1)
    end
end

function waitTimeoutOneOf(image1, image2, reg, timeout)
    local found1 = false
    local found2 = false
    imgCC = false

    while (not (findImage(image1, reg)) and not (findImage(image2, reg)) and timeout > 0) do
        wait(0.1)
        timeout = timeout - 0.3
    end

    usePreviousSnap(true)
    if (findImage(image1, reg)) then
        imgCC = image_Center
    elseif (findImage(image2, reg)) then
        imgCC = image_Center
    end
    usePreviousSnap(false)

    return imgCC
end

function waitOneOf3ExistAndClick(image1, image2, image3, reg, timeAfter)
    while (not (existsClick(image1, reg, timeAfter))
            and not (existsClick(image2, reg, timeAfter))
            and not (existsClick(image3, reg, timeAfter))) do
        wait(0.1)
    end
end

function waitTimeoutExistAndClick(image, reg, timeout, timeAfter)
    local found = false
    while (not (existsClick(image, reg, timeAfter)) and timeout > 0) do
        -- toast("h")
        wait(0.1)
        timeout = timeout - 0.3
    end

    usePreviousSnap(true)
    if (findImage(image, reg)) then
        found = true
    end
    usePreviousSnap(false)
    return found

end

function waitTimeout(image, reg, timeout)
    local found = false
    while (not (findImage(image, reg)) and timeout > 0) do
        wait(0.1)
        timeout = timeout - 0.3
    end

    usePreviousSnap(true)
    if (findImage(image, reg)) then
        found = true
    end
    usePreviousSnap(false)
    return found

end

function existsClickFullSimilarity(image, reg, timeAfter)
    --- img = reg:exists(image:similar(CustomSumilar), CustomTimeToIdentify)
    found = reg:existsClick(image:similar(0.95), CustomTimeToIdentify)

    wait(timeAfter)
    return found
end

function existsClickTimeout(image, reg, timeAfter, timeout)
    i = 0
    while (not (timeout == i)) do
        bonusImg = reg:exists(image:similar(CustomSumilar), CustomTimeToIdentify)
        if (bonusImg) then
            printDebug("found")
            wait(3)
            center = image:getCenter()
            click(center)

            break
        end
        i = i + 0.1
        wait(0.1)
    end
    wait(timeAfter)
end

local open = io.open

function read_file(path)
    local file = open(path, "rb") -- r read mode and b binary mode
    if not file then
        return nil
    end
    local content = file:read "*a" -- *a or *all reads the whole file
    file:close()
    return content
end


function log(msg)
    --
    fileName = scriptPath() .. "log.txt"

    if msg == "del" or msg == "delete" or msg == "clear" or msg == "new" then
        -- сотрём старый файл
        os.remove(fileName)
    else
        file = io.open(fileName, "a")
        io.output(file)
        -- "\n" символ конца строки
        -- ".." символ объединения строк
        --io.write(os.date('%Y-%m-%d %H:%M:%S', os.time()), " - ", msg, "\n")
        io.write(msg, "\n")
        file:flush()
        io.close(file) -- закроем файл
    end -- endif
end

function F_log(message)
    --  if (debuggingLog == true) then
    log(message)
    --wait(1)
    -- else
    --wait(1)
    -- end
end

function simplelog(msg)
    --
    fileName = scriptPath() .. "log" .. rnd(1, 100) .. ".txt"
    -- toast(fileName)
    -- wait(6)
    file = io.open(fileName, "a")
    io.output(file)
    -- "\n" символ конца строки
    -- ".." символ объединения строк
    io.write(msg, "\r\n")
    file:flush()
    io.close(file) -- закроем файл

end

function F_print(message)
    print(message)
end

function F_toast(message)
    if (debuggingToast == true) then
        toast(message)
        wait(1)
        --wait(1)
    else
        --wait(1)
    end
end

function printDebug(message)
    F_log(message)
    F_print(message)
    F_toast(message)
end

if F_NewLog == true then
    F_log("new")
end

function rnd(startNumber, endNumber)
    math.randomseed(os.time()) -- random initialize
    math.random()
    math.random()
    math.random() -- warming up
    return math.random(startNumber, endNumber)
end